using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// This class controls Actions, both in store and queue.
/// </summary>
public class ActionController : MonoBehaviour
{
    // GameController that handles the whole scene.
    // This reference is added as actions are generated.
    private GameController gameController;

    // The scriptable object that dictates the look and functionality
    // of this action.
    private ActionScriptableObject action;

    // Sprite renderers of the action base, icon and active border, respectively.
    public SpriteRenderer sr;
    public SpriteRenderer iconSr;
    public GameObject border;

    // Whether this Action is in the store (not queued) or in the queue (queued).
    private bool isQueued = false;

    void Start() {
        sr.color = action.color;
        iconSr.sprite = action.icon;
    }
    
    void OnMouseDown() {
        if (gameController.isRunning) {
            return;
        }
        // Depending on whether or not this Action is queued, we either add a copy of this Action
        // to the queue, or remove this from the queue.
        if (!isQueued) {
            gameController.AddActionToQueue(action);
        }
        else {
            gameController.RemoveActionFromQueue(this);
        }
    }

    /// <summary>
    /// When Actions (this class) are generated by the GameController, the GameController calls
    /// this method to set some values.
    /// </summary>
    /// <param name="action">Dictates the look and functionality of this Action.</param>
    /// <param name="gc">Controls the whole game.</param>
    /// <param name="isQueued">True if we are generating an Action that goes into the queue.</param>
    public void SetValues(ActionScriptableObject action, GameController gc, bool isQueued) {
        this.action = action;
        this.gameController = gc;
        this.isQueued = isQueued;
    }

    /// <summary>
    /// Returns the word that the playerController uses to identify which Action it is accessing.
    /// </summary>
    public string GetWord() {
        return action.actionName;
    }

    /// <summary>
    /// Makes the border of this Action active, indicating that the player is currently executing this
    /// Action.
    /// </summary>
    /// <param name="b"></param>
    public void MakeActive(bool b) {
        border.gameObject.SetActive(b);
    }
}
